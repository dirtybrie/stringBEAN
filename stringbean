#! /usr/bin/python3

# STRINGBEAN v 0.01
# by Dirty Brie
# GNU GENERAL PUBLIC LICENSE v3.0
#
# This is a random string genorator is geared towards an aid for aircrack-ng 
# dictionary attacks for hotpot default generated passwords.
# the success rate I've had is about 34.22% on 82 ATT&T Hotspots, I sh*t you not
# However the actual 'odds' are very, very devestating for us.
# 
# Hotspots, modems and routers a lot of the times come with a default password that 
# consists of Characters(uppercase & lowercase) and Numbers only. people tend to not
# change them (suprisingly) and the libraries that give out hotspots tell the recipient 
# not to change the passwords either.
# 
# This program will generate randome strings.
# The strings consist of uppercase;lowercase characters and numbers only. 
# To change that, simply swap charnumb at line 138 with one of the variables at the 
# ASCII Table (Lines 58-69)
# You can also alter the limit for text length and lines in a file
# by changing the values of lst_limit and str_limit
#
# If for some reason you do not have a Documents directory
# This program will through an error.
#
# Just FYI the file stringbean writes to is in append mode so as long
# as the name you give the .txt file remains the same and is in the
# stringbeans directory.
# stringbean won't overwrite but instead append to it
# -db
#
# Tips for me on better programming? Contact me ;)


import random
import string
import argparse
import os
import getpass
import sys
os.getcwd()
user = getpass.getuser()
path = f"/home/{user}/Documents/stringbean"
chk_path = f"/home/{user}/Documents"

# ASCII TABLE
char = string.ascii_letters
numb = '0123456789'
spec = string.punctuation
# Characters and Numbers
charnumb = char + numb
# Characters and Special Characters
charspec = char + spec
# Numbers and Special Characters
numbspec = numb + spec
# Characters, Numbers and Special Characters.
cns = char + numb + spec

# LIMITS
str_limit = 20
lst_limit = 200001

class banners():
	def __init__(self):
		pass

	def str_machine(self):
		print('''
               n
       	        nm
        	  MM
        	  ### 
        	f#$$#
               __$$$$_  
               | \##
	_______|  |____ 
	|___X     X __| 
	|____xxxxx____| 
	|r E 3 f $ # v| 
	|v_v_v_v_v_v_v| 
	|_____________| 
		''')
	
	def help_sb(self):
		print('''
	STRINGBEAN v0.01
	by Dirty Brie
	****************  
	_________________________________________________
	usage:
	There must be 2 arguments and
	both arguments must be integers
	the First argument is how long the texts will be
	the Second is how many lines the text file will have
	The limit for the length: 20
	the limit for lines: 200,000

	ex:                      output:
	stringbean 8 1000       | (8 letters, 1000 lines)
	stingbean 10 300        | (10 letters, 300 lines)

	see the script for more info :)
	__________________________________________________
		''')

def random_string_generator(str_size, allowed_chars):
    return ''.join(random.choice(allowed_chars) for i in range(str_size))

class checkdir(object):
	def __init__(self):
		pass

	def chkdirs(self, chkpath):
		user = getpass.getuser()
		if not os.path.isdir(chkpath):
			print(f"stringbean needs a Documents directory in /home/{user}")
			sys.exit(1)
		else:
			return

	def mkdir(self, path):
		if not os.path.isdir(path):
			os.mkdir(path)
			print(f"Creating Directory: home/{user}/Documents/stringbean")
		elif os.path.isdir(path):
			return

class strgen(object):
	def __init__(self, strlen=False, lstlen=False):
		self.strlen = strlen
		self.lstlen = lstlen

	def spitrun(self):
		if args.strlen < str_limit and args.lstlen < lst_limit:
			count = 0
			filename = input("Enter the name you want the file to be: ")
			while count != args.lstlen:
				# Here you can swap charnumb with one of variables at the ASCII Table (lines 45-56)
				stringbean = random_string_generator(args.strlen, charnumb)
				output = stringbean + "\n"
				with open(f"/home/{user}/Documents/stringbean/{filename}.txt", "a+") as text_file:
					text_file.write(output)
				count += 1
			banners.str_machine()
			print(f"Output file: /home/user/stringbean/{filename}.txt with", args.strlen, "text length and", args.lstlen, "lines")
			return
		else:
			print("Invalid Entry... \nQUITING!!!")

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("strlen", help="String Length", type=int, default=0, nargs="?")
	parser.add_argument("lstlen", help="List Length/Lines", type=int, default=0, nargs="?")
	args = parser.parse_args()
	banners = banners()
	if not (args.strlen and args.lstlen):
		banners.help_sb()
	else:
		checkdir = checkdir()
		checkdir.chkdirs(chk_path)
		checkdir.mkdir(path)
		strgen = strgen(strlen=args.strlen, lstlen=args.lstlen)
		strgen.spitrun()
		
