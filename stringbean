#! /usr/bin/python3

# STRINGBEAN v0.3
# by Dirty Brie
# Licensed under the:
# GNU GENERAL PUBLIC LICENSE v3.0

import random
import string
import argparse
import getpass
import sys
import os
os.getcwd()

user = getpass.getuser()
path = f"/home/{user}/Documents/stringbean"
chk_path = f"/home/{user}/Documents"
r_path = "/opt/stringbean"
r_chkpath = "/opt"
win_chkpath = f"C:\\Users\\{user}\\Documents"
winpath = f"C:\\Users\\{user}\\Documents\\stringbean"

# ASCII TABLE
# Uppercase adn Lowercase letters
char = string.ascii_letters
# Uppercase letters
u_char = string.ascii_uppercase
# Lowercase letters
l_char = string.ascii_lowercase
# you can Obviously tell what that is...
numb = '0123456789'
# Special Characters
spec = string.punctuation
# Characters and Numbers
charnumb = char + numb
# Characters and Special Characters
charspec = char + spec
# Numbers and Special Characters
numbspec = numb + spec
# Characters, Numbers and Special Characters.
cns = char + numb + spec

# LIMITS
str_limit = 21
lst_limit = 200001

class banners():
	def __init__(self):
		pass

	def str_machine(self):
		print('''
               n
       	        nm
        	  MM
        	  ### 
        	f#$$#
               __$$$$_  
               | \##
	_______|  |____ 
	|___X     X __| 
	|____xxxxx____| 
	|r E 3 f $ # v| 
	|v_v_v_v_v_v_v| 
	|_____________| 
		''')
	
	def help_sb(self):
		print('''
STRINGBEAN v.3
by dirty brie
 
_________________________________________________________
usage:
2 arguments are required, both arguments must be integers

the First argument is how long the texts will be.
the Second argument is how many lines per text file.
The limit for the length: 20
the limit for lines: 200,000

ex:                       description:
stringbean 8 1000       | 8 characters, 1000 lines
stringbean 10 300       | 10 characters, 300 lines
__________________________________________________________
		''')

def random_string_generator(str_size, allowed_chars):
    return ''.join(random.choice(allowed_chars) for i in range(str_size))

class checkdir(object):
	def __init__(self):
		pass

	def chkdir(self, chkpath):
		user = getpass.getuser()
		if not os.path.isdir(chkpath):
			print(f"stringbean needs a Documents directory in /home/{user}")
			sys.exit(1)
		else:
			return

	def mkdir(self, path):
		if not os.path.isdir(path):
			os.mkdir(path)
			print(f"Creating Directory: /home/{user}/Documents/stringbean")
		elif os.path.isdir(path):
			return

	def sudo_chkdir(self, chkpath):
		if not os.path.isdir(r_chkpath):
			print("You need an opt directory in /")
			sys.exit(1)
		elif os.path.isdir(r_chkpath):
			return

	def sudo_mkdir(self, path):
		if not os.path.isdir(r_path):
			os.mkdir(r_path)
			print(f"Creating Directory: /opt/stringbean")
		elif os.path.isdir(r_path):
			return

	def win_chkdir(self, chkpath):
		user = getpass.getuser()
		if not os.path.isdir(win_chkpath):
			print(f"stringbean needs a Documents directory in C:\\Users\\{user}")
			sys.exit(1)
		else:
			return

	def win_mkdir(self, path):
		if not os.path.isdir(path):
			os.mkdir(winpath)
			print(f"Creating Directory: C:\\Users\\{user}\\Documents\\stringbean")
		elif os.path.isdir(path):
			return

	def chk_os(self):
		if os.name == "nt":
			return 2
		elif os.name == "posix":
			if getpass.getuser() == 'root':
				return 3
			else:
				return 1
		else:
			print("incompatable OS. sorry...")
			
class strgen(object):
	def __init__(self, strlen=False, lstlen=False):
		self.strlen = strlen
		self.lstlen = lstlen
		
	def spitrun(self):
		if args.strlen < str_limit and args.lstlen < lst_limit:
			count = 0
			filename = input("Enter the name you want the file to be: ")
			while count != args.lstlen:
				# FOR LINUX Here you can swap charnumb with one of variables at the ASCII Table (lines 45-56)
				stringbean = random_string_generator(args.strlen, charnumb)
				output = stringbean + "\n"
				with open(f"/home/{user}/Documents/stringbean/{filename}.txt", "a+") as text_file:
					text_file.write(output)
				count += 1
			banners.str_machine()
			print(f"Output file: /home/{user}/stringbean/{filename}.txt with", args.strlen, "text length and", args.lstlen, "lines")
			return
		else:
			print("Invalid Entry... \nQUITING!!!")

	def sudo_spitrun(self):
		if args.strlen < str_limit and args.lstlen < lst_limit:
			count = 0
			filename = input("Enter the name you want the file to be: ")
			while count != args.lstlen:
				stringbean = random_string_generator(args.strlen, charnumb)
				output = stringbean + "\n"
				with open(f"/opt/stringbean/{filename}.txt", "a+") as text_file:
					text_file.write(output)
				count += 1
			banners.str_machine()
			print(f"Output file: /opt/stringbean/{filename}.txt with", args.strlen, "text length and", args.lstlen, "lines")
			return
		else:
			print("Invalid Entry... \nQUITING!!!")

	def win_spitrun(self):
		if args.strlen < str_limit and args.lstlen < lst_limit:
			count = 0
			filename = input("Enter the name you want the file to be: ")
			while count != args.lstlen:
				# FOR WINDOWS Here you can swap charnumb with one of variables at the ASCII Table (lines 45-56)
				stringbean = random_string_generator(args.strlen, charnumb)
				output = stringbean + "\n"
				with open(f"C:\\Users\\{user}\\Documents\\stringbean\\{filename}.txt", "a+") as text_file:
					text_file.write(output)
				count += 1
			banners.str_machine()
			print(f"Output file: C:\\Users\\{user}\\stringbean\\{filename}.txt with", args.strlen, "text length and", args.lstlen, "lines")
			return
		else:
			print("Invalid Entry... \nQUITING!!!")

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("strlen", help="String Length", type=int, default=0, nargs="?")
	parser.add_argument("lstlen", help="List Length/Lines", type=int, default=0, nargs="?")
	args = parser.parse_args()
	banners = banners()
	if not (args.strlen and args.lstlen):
		banners.help_sb()
	else:
		checkdir = checkdir()
		checkdir.chk_os()
		if checkdir.chk_os() == 1:
			checkdir.chkdir(chk_path)
			checkdir.mkdir(path)
			strgen = strgen(strlen=args.strlen, lstlen=args.lstlen)
			strgen.spitrun()
		elif checkdir.chk_os() == 2:
			checkdir.win_chkdir(win_chkpath)
			checkdir.win_mkdir(winpath)
			strgen = strgen(strlen=args.strlen, lstlen=args.lstlen)
			strgen.win_spitrun()
		elif checkdir.chk_os() == 3:
			checkdir.sudo_chkdir(r_chkpath)
			checkdir.sudo_mkdir(r_path)
			strgen = strgen(strlen=args.strlen, lstlen=args.lstlen)
			strgen.sudo_spitrun()
